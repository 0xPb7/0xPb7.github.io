I"u<h3 id="what-is-xss">What is XSS?</h3>

<p>A malicious Injection of JavaScript into a webpage.</p>

<h3 id="what-can-you-do-with-an-xss">What can you do with an XSS?</h3>

<h4 id="the-attacker-can-do-anything-on-that-origin-that-the-user-can-do">The attacker can do anything on that origin that the user can do</h4>

<ul>
  <li>Read Private Messages</li>
  <li>Tweet Pro</li>
  <li>Credit Card Skimming</li>
  <li>Fake logout to steal credentials</li>
</ul>

<h4 id="for-financial-apps-medical-infra---its-much-more-serious">For Financial apps, Medical, Infra - it’s much more serious</h4>
<ul>
  <li>steal funds</li>
  <li>Leak Medical Records</li>
  <li>Tear Down Infra</li>
</ul>

<h3 id="what-is-csp">What is CSP?</h3>

<p>A tool to help prevent XSS exploitation.</p>

<h3 id="how-does-it-prevent-xss-exploitation">How does it prevent XSS exploitation?</h3>

<p>It tells the browser which resources are allowed.</p>

<h3 id="what-does-csp-look-like">What does CSP look like?</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>default-src 'self';
connect-src 'self'
font-src 'self' data: 
frame-src 'self' 
img-src 'self' data: https;
object-src 'none';
script-src 'self'
style-src 'self' 'unsafe-inline';
base-uri 'self';
</code></pre></div></div>

<h3 id="how-is-csp-delivered">How is CSP delivered?</h3>

<p>It’s delivered through the HTTP headers.</p>

<p>HTTP Request</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET /index.html HTTP/1.1
Host: app.com
User-Agent: Mozilla/5.0
Accept-Language: en-US
Accept-Encoding: gzip, delfate
</code></pre></div></div>

<p>HTTP Response</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTTP/1.1 200 OK
Content-Type: Text/html
Content-LengthL 4567
Set-Cookie: user_session=abc123
Content-Security-Policy: default-src 'none', script-src 'self';

&lt;html&gt; &lt;title&gt;app.com&lt;/title&gt;&lt;/html&gt;
</code></pre></div></div>

<h3 id="nodejs--express">NodeJS / Express</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>app.use(function(req, res, next) {}
	res.setHeader("Content-security-policy-report-only", "default-src 'self'; script-src 'self' 'report-sample'; next();
});
</code></pre></div></div>

<h3 id="what-are-the-different-csp-directives">What are the different CSP Directives?</h3>

<p><strong><img src="https://lh7-us.googleusercontent.com/KoN3wPnNHTS3nSR2MI7jRMMFIUwuo41ki2umzwLQapezyIlAilWok1VuQdyf3z0FMth63NEb4IgJLKctO-bPpiBgavegchJQPGnfZxBMjNbhStqf28hGix238qwHb0ie9NK7rXvn2RmQ0s7kgY3gnn4vVw=s2048" alt="" /></strong></p>

<p><strong><img src="https://lh7-us.googleusercontent.com/luehXo4iiFoRv2kqnqs5U3sqpoMkm4ro9GDPSCE8Gh-Mf-wFA_Vs5cshtWabIvy-90dHGcJCLGui6UVVPN4WBwDPjWm3I9558-5N0taRfkzNE9qbVqCwgW6niGjMe-gTkPC3GLhzoBl010W4WJLfye6qIA=s2048" alt="" /></strong></p>

<h3 id="what-are-the-different-csp-sources">What are the different CSP sources?</h3>

<p><strong><img src="https://lh7-us.googleusercontent.com/x-aPtn0ErJ6X_wRS8rb5AqLSJZW5RYvofE7JoIy_SkUSytS8Ff-rJaeSwzLja7Ic_R2YSJX5V6bafp-vgX2THtEvkrH6150jSvB0Yvh-IQyd2c__8e1cfQd0o-X73XZX_RGiV36HmSaXN1jjtSRmVT9ZPQ=s2048" alt="" /></strong></p>

<p><strong><img src="https://lh7-us.googleusercontent.com/DtnbiOahI0Q1iQ0YexXkoNH8nePir4QN4fj48ZIn8wR3Vs-fubDLx9e-LfjV3BPBWVa_WSNwpZsJ6qxjEDQ4OAurBJQVgafxlz32esV44WOjm0FZDgdfJg3aPYAjR9PFFKbXqyZplS9RReWqWj3gaCotyQ=s2048" alt="" /></strong></p>

<h3 id="what-is-in-a-content-security-policy">What is in a Content Security Policy?</h3>

<p>A list of ‘directives’ which contain ‘sources’</p>

<h3 id="how-does-specifying-script-src-prevent-an-inline-xss">How does specifying script-src prevent an inline XSS?</h3>

<p>Inline scripts (and eval) are blocked</p>

<h3 id="what-is-blocked-with-a-standard-content-security-policy">What is blocked with a standard Content-Security-Policy?</h3>

<p>![[Pasted image 20231201234932.png]]</p>

<p>Blocked:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;script src="https://evil.com/malicious.js"&gt;&lt;/script&gt;

&lt;button onclick="xxx"&gt;&lt;/button&gt; //CSP does not allow this

&lt;script&gt; //CSP does not allow this because it is an inline JS
	// app code
&lt;/script&gt;
</code></pre></div></div>

<ul>
  <li>Because there’s no way to differentiate between malicious Inline JavaScript and allowed Inline JavaScript.</li>
</ul>

<h3 id="what-to-do-about-inline-scripts">What to do about inline scripts?</h3>

<p>&lt;p style=”align:center”;&gt; Move to a file &lt;/p&gt;</p>

<p><img src="/_posts/CSP-101/csp02.png" alt="csp01" /></p>

<h3 id="what-if-i-cant-move-all-the-javascript">What if I can’t move all the JavaScript?</h3>

<table>
  <thead>
    <tr>
      <th>sha256-abc123</th>
      <th>Hash the JavaScript and include the hash-source</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td> </td>
      <td><script>normalAppCode</script></td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td>Does not work on event_handlers, to include those, include ‘unsafe-hashes’</td>
      <td> </td>
    </tr>
    <tr>
      <td>nonce-abc-123</td>
      <td>Generate a random unique token on each request and add it to the script tags</td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td><script nonce="abc123">normalAppCode</script></td>
      <td> </td>
    </tr>
    <tr>
      <td>‘unsafe-inline’</td>
      <td>Disable CSP’s XSS protection (not recommended)</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h3 id="what-about-eval">What about eval?</h3>

<table>
  <thead>
    <tr>
      <th>‘unsafe-eval’</th>
      <th>Allows the use of eval</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td> </td>
      <td>eval(), Function(‘’), setTimeout(‘’)</td>
    </tr>
  </tbody>
</table>

:ET